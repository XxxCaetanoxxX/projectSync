generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tb_user {
  id              Int            @id @default(autoincrement())
  name            String
  cpf             String         @unique
  email           String         @unique
  phone           String         @unique
  password        String
  role            Role
  createdAt       DateTime       @default(now())
  imageId         Int?           @unique
  eventsOrganized tb_event[]     @relation("OrganizerToEvent")
  image           tb_user_image?
  tickets         tb_ticket[] // Relacionamento com ingressos comprados
}

model th_user_hist {
  id                   Int    @id @default(autoincrement())
  modified_by_id       Int
  modified_by_name     String
  user_id              Int
  operation            String
  endpoint_modificador String
}

model tb_user_image {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  path   String
  user   tb_user @relation(fields: [userId], references: [id])
}

model tb_ticket_type {
  id           Int       @id @default(autoincrement())
  name         String
  price        Float
  quantity     Int
  eventId      Int
  dt_criacao   DateTime?
  dt_alteracao DateTime?
  operation    String
  event        tb_event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  tickets tb_ticket[]
}

model th_ticket_type_hist {
  id                   Int       @id @default(autoincrement())
  modified_by_id       Int
  modified_by_name     String
  ticket_type_id       Int
  operation            String
  endpoint_modificador String
  dt_criacao           DateTime?
  dt_alteracao         DateTime?
}

model tb_ticket {
  id           Int            @id @default(autoincrement())
  ticketName   String
  ticketTypeId Int
  userId       Int
  ticket_type  tb_ticket_type @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)
  user         tb_user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())

  @@unique([ticketTypeId, userId])
}

model th_ticket_hist {
  id                   Int      @id @default(autoincrement())
  modified_by_id       Int
  modified_by_name     String
  ticket_id            Int
  operation            String
  endpoint_modificador String
  dt_criacao           DateTime @default(now())
}

model tb_event {
  id           Int                  @id @default(autoincrement())
  name         String
  organizerId  Int
  partyHouseId Int
  artists      tb_artist_on_event[]
  organizer    tb_user              @relation("OrganizerToEvent", fields: [organizerId], references: [id])
  party_house  tb_party_house       @relation(fields: [partyHouseId], references: [id], onDelete: Cascade)
  images       tb_event_image[]
  ticketTypes  tb_ticket_type[]
}

model th_event_hist {
  id                   Int      @id @default(autoincrement())
  modified_by_id       Int
  modified_by_name     String
  event_id             Int
  operation            String
  endpoint_modificador String
  dt_criacao           DateTime @default(now())
}

model tb_event_image {
  id      Int      @id @default(autoincrement())
  eventId Int
  path    String
  event   tb_event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model tb_artist {
  id     Int                  @id @default(autoincrement())
  name   String
  events tb_artist_on_event[]
}

model th_artist_hist {
  id                   Int      @id @default(autoincrement())
  modified_by_id       Int
  modified_by_name     String
  artist_id            Int
  operation            String
  endpoint_modificador String
  dt_criacao           DateTime @default(now())
}

model tb_artist_on_event {
  id       Int       @id @default(autoincrement())
  artistId Int
  eventId  Int
  artist   tb_artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  event    tb_event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([artistId, eventId])
}

model tb_party_house {
  id      Int        @id @default(autoincrement())
  name    String
  address String
  events  tb_event[]
}

model th_party_house_hist {
  id                   Int      @id @default(autoincrement())
  modified_by_id       Int
  modified_by_name     String
  party_house_id       Int
  operation            String
  endpoint_modificador String
  dt_criacao           DateTime @default(now())
}

enum Role {
  ADMIN
  ORGANIZER
  PARTICIPANT
}
